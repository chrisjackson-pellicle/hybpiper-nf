////////////////////////////////////////////////////////////////////////
//////  Nextflow config file for 'hybpiper_pipeline.nf' pipeline  //////
////////////////////////////////////////////////////////////////////////

// set some defaults for pipeline parameters
params {
    help = false
    outdir = 'results'
    illumina_reads_directory = false
    target_file = false
    cleanup = false
    nosupercontigs = false
    bbmap_subfilter = 7
    discordant_reads_edit_distance = 5
    discordant_reads_cutoff = 5
    merged = false
    paired_and_single = false
    single_only = false
    read_pairs_pattern = 'R1,R2'
    single_pattern = 'single'
    use_blastx = false
    num_forks = false
    memory = 1
    translate_target_file_for_blastx = false
    blastx_evalue = 1e-4
    paralog_warning_min_len_percent = 0.75
    cov_cutoff = 8
    use_trimmomatic = false
    trimmomatic_leading_quality = 3
    trimmomatic_trailing_quality = 3
    trimmomatic_min_length = 36
    trimmomatic_sliding_window_size = 4
    trimmomatic_sliding_window_quality = 20
    run_intronerate = false
    combine_read_files = false
    combine_read_files_num_fields = 1
}

// enable HTML execution report by default, written to 'assembly.html'
 report {
     enabled = true
     file = 'assembly.html'
 }

// enable HTML timeline report by default, written to 'timeline.html'
 timeline {
     enabled = true
     file = 'timeline.html'
 }

/* 
enable .dot direct acyclic graph (DAG) report by default, written to 'dag.dot'. If
graphviz is installed this can be converted to e.g. png with the command: 
dot dag.dot -Tpng -o dag.png
*/
dag {
    enabled = true
    file = 'dag.dot'
}

// enable execution tracing file by default, written to 'pipeline_trace.txt'
 trace {
     enabled = true
     file = 'pipeline_trace.txt'
     fields = 'task_id,name,status,exit,realtime,%cpu,rss,container'
 }


/* 
set up profiles. Here I've made profiles for using SLURM, and also a 'standard' 
profile (default)
*/
profiles {

    gadi {
        process { withName: translate_target_file {
                cpus = { 2 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: reads_first_with_unpaired{
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: reads_first_no_unpaired{
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: reads_first_with_single_end_only{
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: visualise {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: summary_stats {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: intronerate {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: paralogs {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries =
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: retrieve_sequences {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: paralog_retriever {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: combine_lanes_paired_only {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: combine_lanes_single_only {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: trimmomatic_paired {
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withName: trimmomatic_single {
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141   ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
                queue = 'normal'
                clusterOptions = "-l wd -l storage=gdata/nm31+scratch/nm31 -P nm31"
                module = 'singularity'
            }
            withLabel: in_container {
                container = \
                'library://chrisjackson-pellicle/collection/hybpiper-yang-and-smith-rbgv:latest'
                }
        }
        executor {
            name = 'pbspronci'
        }
        singularity {
            enabled = true
            //autoMounts = true
            autoMounts = false
            engineOptions = "--debug"
            cacheDir = 'singularity-images'
        }
        env {
            TMPDIR = "/g/data/nm31/chris_jackson"
        }
    }

    slurm {
        process {
            withName: reads_first_with_unpaired{
                cpus = { 30 * task.attempt }
                memory = { 30.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: reads_first_no_unpaired{
                cpus = { 30 * task.attempt }
                memory = { 30.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }  
            withName: reads_first_with_single_end_only{
                cpus = { 30 * task.attempt }
                memory = { 30.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }            
            withName: visualise {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: summary_stats {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: intronerate {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: paralogs {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: retrieve_sequences {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: paralog_retriever {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: combine_lanes_paired_only {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: combine_lanes_single_only {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: trimmomatic_paired {
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: trimmomatic_single {
                cpus = { 10 * task.attempt }
                memory = { 10.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withLabel: in_container {
                container = \
                'library://chrisjackson-pellicle/collection/hybpiper-yang-and-smith-rbgv:latest' 
                }
        }
        executor {
            name = 'slurm'
        }
        singularity {
            enabled = true
            autoMounts = true
            cacheDir = 'singularity-images'
        }
        
    }

    standard {
        process {
            withName: reads_first_with_unpaired{
                cpus = { 2 * task.attempt }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: reads_first_no_unpaired{
                cpus = { 2 * task.attempt }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: reads_first_with_single_end_only{
                cpus = { 2 * task.attempt }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }   
            withName: visualise {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: summary_stats {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: intronerate {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: paralogs {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: retrieve_sequences {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: paralog_retriever {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: combine_lanes_paired_only {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: combine_lanes_single_only {
                cpus = { 1 * task.attempt }
                memory = { 1.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: trimmomatic_paired {
                cpus = { 2 * task.attempt }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: trimmomatic_single {
                cpus = { 2 * task.attempt }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..141 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withLabel: in_container {
                container = \
                'library://chrisjackson-pellicle/collection/hybpiper-yang-and-smith-rbgv:latest'
            }
        }
        singularity {
            enabled = true
            autoMounts = true
            cacheDir = 'singularity-images'
        } 
    }
}
